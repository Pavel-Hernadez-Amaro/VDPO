[{"path":"https://pavel-hernadez-amaro.github.io/VDPO/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 VDPO authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"simulation-studies","dir":"Articles","previous_headings":"","what":"Simulation Studies","title":"Introduction to VDPO","text":"VDPO package includes data generation function data_generator_vd() allows users simulate variable domain functional data testing evaluation purposes. section explains use function various scenarios can generate.","code":"library(VDPO)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"data-generation-function","dir":"Articles","previous_headings":"Simulation Studies","what":"Data Generation Function","title":"Introduction to VDPO","text":"","code":"data_generator_vd(     N = 100,           # Number of subjects     J = 100,           # Maximum observations per subject     nsims = 1,         # Number of simulations     Rsq = 0.95,        # Variance of the model     aligned = TRUE,    # If TRUE, generates aligned data     multivariate = FALSE,  # If TRUE, generates data with 2 variables     beta_index = 1,    # Index for the beta function (1 or 2)     use_x = FALSE,     # If TRUE, adds a non-functional covariate     use_f = FALSE,     # If TRUE, adds a non-linear effect     seed = 42          # Seed for reproducibility )"},{"path":[]},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"basic-parameters","dir":"Articles","previous_headings":"Simulation Studies > Simulation Parameters","what":"Basic Parameters","title":"Introduction to VDPO","text":"N: Number subjects (default: 100) J: Maximum number observations per subject (default: 100) nsims: Number simulation iterations (default: 1) Rsq: Controls signal--noise ratio (default: 0.95)","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"domain-generation","dir":"Articles","previous_headings":"Simulation Studies > Simulation Parameters","what":"Domain Generation","title":"Introduction to VDPO","text":"function can generate two types domains: Aligned domains (aligned = TRUE): subject different number observations Domain lengths uniformly distributed 10 J Domains sorted computational efficiency Non-aligned domains (aligned = FALSE): Creates gaps observation domain Start ending points generated: one inside interval [1, J/2-5] another [J/2+5, J] cases,","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"functional-data-generation","dir":"Articles","previous_headings":"Simulation Studies","what":"Functional Data Generation","title":"Introduction to VDPO","text":"subject, function generates: noisy functional covariate (X_se) multivariate = TRUE, additional variables Y_s Y_se generated. mathematical expression generating variable domain functional data following: Xi(t)=ui+∑k=110(vik1⋅sin(2πk100t)+vik2⋅cos(2πk100t))+δi(t)X_i(t) = u_i + \\sum_{k=1}^{10} \\left(v_{ik1} \\cdot \\sin\\left(\\frac{2πk}{100}t\\right) + v_{ik2} \\cdot \\cos\\left(\\frac{2πk}{100}t\\right)\\right) + δ_i(t)","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"response-generation","dir":"Articles","previous_headings":"Simulation Studies","what":"Response Generation","title":"Introduction to VDPO","text":"response variable y generated based : linear functional effect (using one two possible β\\beta functions) Optional non-functional non-linear covariate use_f = TRUE Optional non-functional linear covariate use_x = TRUE Random noise based specified R-squared value mathematical expression generating response variable following: ηi=1Ti∑t=1TiXi(t)β(t,Ti),t=1,...,Ti≤Jη_i = \\frac{1}{T_i}\\sum_{t=1}^{T_i} X_i(t)β(t, T_i), t = 1, ..., T_i ≤ J TiT_i specific domain ii-th subject.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"example-usage","dir":"Articles","previous_headings":"Simulation Studies","what":"Example Usage","title":"Introduction to VDPO","text":"","code":"# Generate basic simulation data sim_data <- data_generator_vd()  # Generate more complex data complex_sim <- data_generator_vd(     N = 200,      J = 150,     aligned = FALSE,     multivariate = TRUE,     use_x = TRUE,     use_f = TRUE )  # Access generated components head(sim_data$y)        # Response variable #> [1] -0.51884279  0.77455202  0.17400721 #> [4]  0.35218196  0.35125460 -0.08737818 dim(sim_data$X_s)       # Dimensions of functional covariate #> [1] 100  99 head(sim_data$x1)       # Non-functional covariate (if use_x = TRUE) #> [1] -1.51300593  0.23613533  0.46113917 #> [4] -0.96449987  0.87276443 -0.03593889"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"output-structure","dir":"Articles","previous_headings":"Simulation Studies","what":"Output Structure","title":"Introduction to VDPO","text":"function returns list containing: y: Response variable X_s: Noise-free functional covariate X_se: Noisy functional covariate Y_s, Y_se: Additional functional variables (multivariate = TRUE) x1: Non-functional covariate x2: Vector length N containing observed values smooth term smooth_term: vector length N containing smooth term Beta: Array containing true functional coefficients","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"notes","dir":"Articles","previous_headings":"Simulation Studies","what":"Notes","title":"Introduction to VDPO","text":"function uses fixed seed reproducibility noise level functional covariates proportional variance Two different functional coefficient shapes available (controlled beta_index) data generation function allows users create various scenarios testing evaluating variable domain functional regression models implemented VDPO package.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"visualizing-simulated-data","dir":"Articles","previous_headings":"","what":"Visualizing Simulated Data","title":"Introduction to VDPO","text":"better understand structure simulated data, let’s create visualizations. ’ll look multiple functional curves compare original curve noisy version.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"multiple-functional-curves","dir":"Articles","previous_headings":"Visualizing Simulated Data","what":"Multiple Functional Curves","title":"Introduction to VDPO","text":"First, let’s visualize multiple functional curves generated simulation:  plot shows four different functional curves generated simulation. Notice curve different domain length pattern, reflecting variable domain nature data.","code":"library(ggplot2) library(tidyr) library(dplyr)  # Generate sample data set.seed(42) sim_data <- data_generator_vd(N = 100, J = 100)  # Select specific rows for plotting selected_rows <- c(20, 30, 60, 80)  # Prepare data for plotting - Multiple curves plot_data_multiple <- data.frame(   time = rep(1:ncol(sim_data$X_s), length(selected_rows)),   value = as.vector(t(sim_data$X_s[selected_rows, ])),   curve = factor(rep(paste(\"Subject\", selected_rows), each = ncol(sim_data$X_s))) )  # Remove NA values while maintaining curve integrity plot_data_multiple <- plot_data_multiple %>%   group_by(curve) %>%   mutate(is_na = is.na(value)) %>%   filter(cumsum(is_na) == 0) %>%   select(-is_na)  # Create a more professional color palette colors <- c(\"#0072B2\", \"#D55E00\", \"#CC79A7\", \"#009E73\", \"#E69F00\")  p1 <- ggplot(plot_data_multiple, aes(x = time, y = value, color = curve)) +   geom_line(linewidth = 1) +   theme_minimal(base_size = 12, base_family = \"sans\") +   scale_color_manual(values = colors) +   labs(     title = \"Variable Domain Functional Data\",     subtitle = \"Selected subjects showing different domain lengths\",     x = \"Time\",     y = \"Value\",     color = \"Subject ID\"   ) +   theme(     plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),     plot.subtitle = element_text(hjust = 0.5, size = 12, color = \"gray40\"),     legend.position = \"right\",     legend.title = element_text(face = \"bold\"),     panel.grid.minor = element_blank(),     panel.grid.major = element_line(color = \"gray90\"),     panel.border = element_rect(color = \"gray90\", fill = NA),     axis.title = element_text(face = \"bold\")   )  p1"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"original-vs-noisy-curve","dir":"Articles","previous_headings":"Visualizing Simulated Data","what":"Original vs Noisy Curve","title":"Introduction to VDPO","text":"Next, let’s compare original functional curve noisy version:  visualization shows added noise affects single functional curve. blue line represents original functional data (X_s), orange line shows curve added noise (X_se). noise level proportional variance original curve, ensuring consistent relative noise levels across different curves. visualizations help us understand structure characteristics simulated data, including variable domain lengths impact added noise.","code":"# Plot single curve with noise selected_curve <- 50 plot_data_single <- data.frame(   time = rep(1:ncol(sim_data$X_s), 2),   value = c(sim_data$X_s[selected_curve, ], sim_data$X_se[selected_curve, ]),   type = factor(rep(c(\"Original\", \"Noisy\"), each = ncol(sim_data$X_s))) ) %>%    filter(!is.na(value))  ggplot(plot_data_single, aes(x = time, y = value, color = type)) +   geom_line(linewidth = 1) +   theme_minimal() +   scale_color_manual(values = c(\"Original\" = \"#1f77b4\", \"Noisy\" = \"#ff7f0e\")) +   labs(     title = \"Original vs Noisy Functional Curve\",     x = \"Time\",     y = \"Value\",     color = \"Type\"   )"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Model fitting for variable domain functional data","text":"VDPO package provides, among tools, methods analyzing variable domain functional data. vignette demonstrates fit variable domain functional regression models using vd_fit function, designed handle various types functional non-functional covariates flexible framework.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data Generation","title":"Model fitting for variable domain functional data","text":"’ll start generating sample data using data_generator_vd function. function creates simulated data variable domain functional covariates additional non-functional covariates specified.","code":"library(VDPO) # Generate data with functional and non-functional covariates data <- data_generator_vd(beta_index = 1, use_x = TRUE, use_f = TRUE)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Model fitting for variable domain functional data","text":"vd_fit function main tool fitting variable domain functional regression models. supports various model specifications formula interface.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"basic-model-with-single-functional-covariate","dir":"Articles","previous_headings":"Model Fitting","what":"Basic Model with Single Functional Covariate","title":"Model fitting for variable domain functional data","text":"Let’s start basic model using functional covariate:","code":"data <- data_generator_vd(beta_index = 1, use_x = FALSE, use_f = FALSE) formula <- y ~ ffvd(X_se, nbasis = c(10, 10, 10)) res <- vd_fit(formula = formula, data = data)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"model-with-multiple-functional-covariates","dir":"Articles","previous_headings":"Model Fitting","what":"Model with Multiple Functional Covariates","title":"Model fitting for variable domain functional data","text":"data contains multiple functional covariates, can include model:","code":"data <- data_generator_vd(   beta_index = 1,   use_x = FALSE,   use_f = FALSE,   multivariate = TRUE ) formula <- y ~ ffvd(X_se, nbasis = c(10, 10, 10)) + ffvd(Y_se, nbasis = c(10, 20, 10)) res_multi <- vd_fit(formula = formula, data = data)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"model-with-functional-and-non-functional-covariates","dir":"Articles","previous_headings":"Model Fitting","what":"Model with Functional and Non-Functional Covariates","title":"Model fitting for variable domain functional data","text":"vd_fit function also supports including non-functional covariates, linear smooth terms: model: ffvd(X_se, nbasis = c(10, 10, 10)) specifies functional covariate f(x2, nseg = 30, pord = 2, degree = 3) adds smooth effect x2 x1 included linear term","code":"data <- data_generator_vd(beta_index = 1, use_x = TRUE, use_f = TRUE) formula <- y ~ ffvd(X_se, nbasis = c(10, 10, 10)) + f(x2, nseg = 30, pord = 2, degree = 3) + x1 res_complex <- vd_fit(formula = formula, data = data)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"model-summary","dir":"Articles","previous_headings":"","what":"Model Summary","title":"Model fitting for variable domain functional data","text":"can obtain summary fitted model using summary function:","code":"summary(res_complex) #>  #> Family: gaussian  #> Link function: identity  #>  #>  #> Formula: #> NULL #>  #>  #> Fixed terms:  #>                                  x2  #>   1.3411243   1.0123313   0.2694401  #>                                      #>  -3.8477320   5.2390987 -10.3013965  #>              #>   6.0801871  #>  #>  #> Estimated degrees of freedom: #> Total edf     Total      <NA>      <NA>  #>    5.1409    3.7799    0.0000    8.9208  #>      <NA>  #>   15.9208  #>  #> R-sq.(adj) =  0.959   Deviance explained = 97.5%  n = 100 #>  #> Number of iterations: 1"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"working-with-non-aligned-data","dir":"Articles","previous_headings":"","what":"Working with Non-Aligned Data","title":"Model fitting for variable domain functional data","text":"vd_fit function can handle aligned non-aligned functional data. ’s example non-aligned data:","code":"data_not_aligned <- data_generator_vd(aligned = FALSE, beta_index = 1) formula <- y ~ ffvd(X_se, nbasis = c(10, 10, 10)) res_not_aligned <- vd_fit(formula = formula, data = data_not_aligned)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"additional-functionality","dir":"Articles","previous_headings":"","what":"Additional functionality","title":"Model fitting for variable domain functional data","text":"need include offset model, can use offset argument:","code":"offset <- rnorm(nrow(data$X_se)) res_with_offset <- vd_fit(formula = formula, data = data, offset = offset)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"plotting-the-betas","dir":"Articles","previous_headings":"Additional functionality","what":"Plotting the betas","title":"Model fitting for variable domain functional data","text":"heatmap specific beta model can obtained using plot function:","code":"plot(res)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-02-vd-models.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final remarks","title":"Model fitting for variable domain functional data","text":"vd_fit function VDPO package provides flexible powerful tool fitting variable domain functional regression models. supports wide range model specifications, including multiple functional covariates, non-functional covariates, various distribution families. leveraging formula interface, users can easily specify complex models tailored specific analysis needs.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pavel Hernandez. Author, maintainer. Jose Ignacio Diez. Contractor. Maria Durban. Contributor. Maria del Carmen Aguilera-Morillo. Contributor.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hernandez P (2024). VDPO: Tools Working Analyzing Functional Data Varying Lengths. R package version 0.1.0, https://pavel-hernadez-amaro.github.io/VDPO/.","code":"@Manual{,   title = {VDPO: Tools for Working with and Analyzing Functional Data of Varying Lengths},   author = {Pavel Hernandez},   year = {2024},   note = {R package version 0.1.0},   url = {https://pavel-hernadez-amaro.github.io/VDPO/}, }"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/index.html","id":"vdpo","dir":"","previous_headings":"","what":"Tools for Working with and Analyzing Functional Data of Varying Lengths","title":"Tools for Working with and Analyzing Functional Data of Varying Lengths","text":"VDPO package provides tools working analyzing functional data varying lengths. variation length can occur two different scenarios: Variable Domain Data Partially Observed Data. refers cases domain data observed changes observations functional data fully observed entire domain interest, respectively. instance, growth curve analysis, individual might measurements starting ending different ages, leading varying observation ranges. Similarly, environmental studies, different locations might data collected distinct time periods, creating domains different lengths.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/index.html","id":"related-papers","dir":"","previous_headings":"","what":"Related Papers","title":"Tools for Working with and Analyzing Functional Data of Varying Lengths","text":"Pavel Hernandez-Amaro, Maria Durban, M. Carmen Aguilera-Morillo, Cristobal Esteban Gonzalez, Inmaculada Arostegui. “Modelling physical activity profiles COPD patients: fully functional approach variable domain functional regression models.” doi: 10.48550/arXiv.2401.05839","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Working with and Analyzing Functional Data of Varying Lengths","text":"install package GitHub, remotes package required:","code":"# install.packages(\"remotes\") remotes::install_github(\"Pavel-Hernadez-Amaro/VDPO\")"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/index.html","id":"web","dir":"","previous_headings":"","what":"Web","title":"Tools for Working with and Analyzing Functional Data of Varying Lengths","text":"web page package can accessed link.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":null,"dir":"Reference","previous_headings":"","what":"Data generator function for the variable domain case — data_generator_vd","title":"Data generator function for the variable domain case — data_generator_vd","text":"Generates variable domain functional regression model","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data generator function for the variable domain case — data_generator_vd","text":"","code":"data_generator_vd(   N = 100,   J = 100,   nsims = 1,   Rsq = 0.95,   aligned = TRUE,   multivariate = FALSE,   beta_index = 1,   use_x = FALSE,   use_f = FALSE,   seed = NULL )"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data generator function for the variable domain case — data_generator_vd","text":"N Number subjects. J Number maximum observations per subject. nsims Number simulations per simulation study. Rsq Variance model. aligned data generated aligned . multivariate TRUE, data generated 2 functional variables. beta_index Index beta. use_x data generated x. use_f data generated f. seed Seed reproducibility.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data generator function for the variable domain case — data_generator_vd","text":"list containing following components: y: vector length N containing response variable. X_s: matrix non-noisy functional data first functional covariate. X_se: matrix noisy functional data first functional covariate Y_s: matrix non-noisy functional data second functional covariate (multivariate). Y_se: matrix noisy functional data second covariate (multivariate). x1: vector length N containing non-functional covariate (use_x TRUE). x2: vector length N containing observed values smooth term (use_f TRUE). smooth_term: vector length N containing smooth term (use_f TRUE). Beta: array containing true functional coefficients.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data generator function for the variable domain case — data_generator_vd","text":"","code":"# Basic usage with default parameters sim_data <- data_generator_vd()  # Generate data with non-aligned domains non_aligned_data <- data_generator_vd(N = 150, J = 120, aligned = FALSE)  # Generate multivariate functional data multivariate_data <- data_generator_vd(N = 200, J = 100, multivariate = TRUE)  # Generate data with non-functional covariates and smooth term complex_data <- data_generator_vd(   N = 100,   J = 150,   use_x = TRUE,   use_f = TRUE )  # Generate data with a different beta function and R-squared value custom_beta_data <- data_generator_vd(   N = 80,   J = 80,   beta_index = 2,   Rsq = 0.8 )  # Access components of the generated data y <- sim_data$y # Response variable X_s <- sim_data$X_s # Noise-free functional covariate X_se <- sim_data$X_se # Noisy functional covariate"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Defining variable domain functional data terms in vd_fit formulae — ffvd","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"Auxiliary function used define ffvd terms within vd_fit model formulae. term represents functional predictor function observed domain varying length. formulation \\(\\frac{1}{T_i} \\int _1^{T_i} X_i(t)\\beta(t,T_i)dt\\), \\(X_i(t)\\) functional covariate length \\(T_i\\), \\(\\beta(t,T_i)\\) unknown bivariate functional coefficient. functional basis used model term B-spline basis.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"","code":"ffvd(X, grid, nbasis = c(30, 50, 30), bdeg = c(3, 3, 3))"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"X variable domain functional covariate matrix. grid observation points variable domain functional covariate. provided, 1:ncol(X). nbasis number bspline basis used. bdeg degree bspline basis used.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"function interpreted formula VDPO model. list containing following elements: item named B design matrix. item named X_hat smoothed functional covariate. item named L_Phi B_T 1-dimensional marginal B-spline basis used functional coefficient. item named M matrix object indicating observed domain data. item named nbasis number basis used.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"","code":"# Generate sample data set.seed(123) data <- data_generator_vd(beta_index = 1, use_x = FALSE, use_f = FALSE) X <- data$X_se  # Specifying a custom grid custom_grid <- seq(0, 1, length.out = ncol(X)) ffvd_term_custom_grid <- ffvd(X, grid = custom_grid, nbasis = c(10, 10, 10))  # Customizing the number of basis functions ffvd_term_custom_basis <- ffvd(X, nbasis = c(10, 10, 10))  # Customizing both basis functions and degrees ffvd_term_custom <- ffvd(X, nbasis = c(10, 10, 10), bdeg = c(3, 3, 3))"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"vd_fit function fits generalized additive functional regression models variable domain functional data.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"","code":"vd_fit(formula, data, family = stats::gaussian(), offset = NULL)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"formula formula object least one ffvd term. data list object containing response variable covariates components list. family family object specifying distribution data originates. default distribution gaussian. offset offset vector. default value NULL.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"object class vd_fit. list containing following items: item named fit class sop. See sop.fit. item named Beta estimated functional coefficient. item named theta basis coefficient Beta. item named covar_theta covariance matrix theta. item named M number observations points curve. item named ffvd_evals result evaluations ffvd terms formula.","code":""},{"path":[]},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"","code":"if (FALSE) { # \\dontrun{ # VARIABLE DOMAIN FUNCTIONAL DATA EXAMPLE  # generate example data data <- data_generator_vd(   N = 100,   J = 100,   beta_index = 1,   use_x = TRUE,   use_f = TRUE,   seed = 42 )  # Define a formula object that specifies the model behavior. # The formula includes a functional form of the variable 'X_se' using 'ffvd' # with a non-default number of basis functions ('nbasis' is set to c(30, 50, 30)). # Additionally, it includes a smooth function 'f' applied to 'x2' with 30 segments ('nseg = 30'), # a second-order penalty ('pord = 2'), and cubic splines ('degree = 3'). # The model also contains the linear term 'x1'. formula <- y ~ ffvd(X_se, nbasis = c(30, 50, 30)) + f(x2, nseg = 30, pord = 2, degree = 3) + x1  # We can fit the model using the data and the formula res <- vd_fit(formula = formula, data = data)  # Some important parameters of the model can be accesed as follows res$Beta # variable domain functional coefficient res$fit$fitted.values # estimated response variable  # Also, a summary of the fit can be accesed using the summary function summary(res)  # And a heatmap for an specific beta can be obtained using the plot function plot(res, beta_index = 1) } # }"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/news/index.html","id":"vdpo-010","dir":"Changelog","previous_headings":"","what":"VDPO 0.1.0","title":"VDPO 0.1.0","text":"Initial CRAN submission.","code":""}]
