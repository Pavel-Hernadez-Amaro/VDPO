[{"path":"https://pavel-hernadez-amaro.github.io/VDPO/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 VDPO authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"simulation-studies","dir":"Articles","previous_headings":"","what":"Simulation Studies","title":"Introduction-to-VDPO","text":"VDPO package includes data generation function data_generator_vd() allows users simulate variable domain functional data testing evaluation purposes. section explains use function various scenarios can generate.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"data-generation-function","dir":"Articles","previous_headings":"Simulation Studies","what":"Data Generation Function","title":"Introduction-to-VDPO","text":"","code":"data_generator_vd(     N = 100,           # Number of subjects     J = 100,           # Maximum observations per subject     nsims = 1,         # Number of simulations     Rsq = 0.95,        # Variance of the model     aligned = TRUE,    # If TRUE, generates aligned data     multivariate = FALSE,  # If TRUE, generates data with 2 variables     beta_index = 1,    # Index for the beta function (1 or 2)     use_x = FALSE,     # If TRUE, adds a non-functional covariate     use_f = FALSE,     # If TRUE, adds a non-linear effect     seed = 42          # Seed for reproducibility )"},{"path":[]},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"basic-parameters","dir":"Articles","previous_headings":"Simulation Studies > Simulation Parameters","what":"Basic Parameters","title":"Introduction-to-VDPO","text":"N: Number subjects (default: 100) J: Maximum number observations per subject (default: 100) nsims: Number simulation iterations (default: 1) Rsq: Controls signal--noise ratio (default: 0.95)","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"domain-generation","dir":"Articles","previous_headings":"Simulation Studies > Simulation Parameters","what":"Domain Generation","title":"Introduction-to-VDPO","text":"function can generate two types domains: Aligned domains (aligned = TRUE): subject different number observations Domain lengths uniformly distributed 10 J Domains sorted computational efficiency Non-aligned domains (aligned = FALSE): Creates gaps observation domain Start ending points generated: one inside interval [1, J/2-5] another [J/2+5, J] cases,","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"functional-data-generation","dir":"Articles","previous_headings":"Simulation Studies","what":"Functional Data Generation","title":"Introduction-to-VDPO","text":"subject, function generates: noisy functional covariate (X_se) multivariate = TRUE, additional variables Y_s Y_se generated. mathematical expression generating variable domain functional data following: Xi(t)=ui+∑k=110(vik1⋅sin(2πk100t)+vik2⋅cos(2πk100t))+δi(t)X_i(t) = u_i + \\sum_{k=1}^{10} \\left(v_{ik1} \\cdot \\sin\\left(\\frac{2πk}{100}t\\right) + v_{ik2} \\cdot \\cos\\left(\\frac{2πk}{100}t\\right)\\right) + δ_i(t)","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"response-generation","dir":"Articles","previous_headings":"Simulation Studies","what":"Response Generation","title":"Introduction-to-VDPO","text":"response variable y generated based : linear functional effect (using one two possible β\\beta functions) Optional non-functional non-linear covariate use_f = TRUE Optional non-functional linear covariate use_x = TRUE Random noise based specified R-squared value mathematical expression generating response variable following: ηi=1Ti∑t=1TiXi(t)β(t,Ti),t=1,...,Ti≤Jη_i = \\frac{1}{T_i}\\sum_{t=1}^{T_i} X_i(t)β(t, T_i), t = 1, ..., T_i ≤ J TiT_i specific domain ii-th subject.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"example-usage","dir":"Articles","previous_headings":"Simulation Studies","what":"Example Usage","title":"Introduction-to-VDPO","text":"","code":"# Generate basic simulation data sim_data <- data_generator_vd()  # Generate more complex data complex_sim <- data_generator_vd(     N = 200,      J = 150,     aligned = FALSE,     multivariate = TRUE,     use_x = TRUE,     use_f = TRUE )  # Access generated components head(sim_data$y)        # Response variable #> [1] -0.51884279  0.77455202  0.17400721  0.35218196  0.35125460 #> [6] -0.08737818 dim(sim_data$X_s)       # Dimensions of functional covariate #> [1] 100  99 head(sim_data$x1)       # Non-functional covariate (if use_x = TRUE) #> [1] 0.06513907 0.77863435 0.59333617 0.53324973 0.67765062 #> [6] 0.63160259"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"output-structure","dir":"Articles","previous_headings":"Simulation Studies","what":"Output Structure","title":"Introduction-to-VDPO","text":"function returns list containing: y: Response variable X_s: Noise-free functional covariate X_se: Noisy functional covariate Y_s, Y_se: Additional functional variables (multivariate = TRUE) x1, x2: Non-functional covariates Beta: Array containing true functional coefficients","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"notes","dir":"Articles","previous_headings":"Simulation Studies","what":"Notes","title":"Introduction-to-VDPO","text":"function uses fixed seed reproducibility noise level functional covariates proportional variance Two different functional coefficient shapes available (controlled beta_index) data generation function allows users create various scenarios testing evaluating variable domain functional regression models implemented VDPO package.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"visualizing-simulated-data","dir":"Articles","previous_headings":"","what":"Visualizing Simulated Data","title":"Introduction-to-VDPO","text":"better understand structure simulated data, let’s create visualizations. ’ll look multiple functional curves compare original curve noisy version.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"multiple-functional-curves","dir":"Articles","previous_headings":"Visualizing Simulated Data","what":"Multiple Functional Curves","title":"Introduction-to-VDPO","text":"First, let’s visualize multiple functional curves generated simulation:  plot shows six different functional curves generated simulation. Notice curve different domain length pattern, reflecting variable domain nature data.","code":"library(ggplot2) library(tidyr) library(dplyr)  # Generate sample data sim_data <- data_generator_vd(N = 100, J = 100, seed = 100)  # Plot multiple curves selected_curves <- 1:6 plot_data_multiple <- data.frame(   time = rep(1:ncol(sim_data$X_s), length(selected_curves)),   value = as.vector(sim_data$X_s[selected_curves, ]),   curve = factor(rep(selected_curves, each = ncol(sim_data$X_s))) ) %>%    filter(!is.na(value))  ggplot(plot_data_multiple, aes(x = time, y = value, color = curve)) +   geom_line(linewidth = 1) +   theme_minimal() +   scale_color_viridis_d() +   labs(     title = \"Multiple Functional Curves\",     x = \"Time\",     y = \"Value\",     color = \"Curve\"   )"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/articles/VDPO-01-introduction.html","id":"original-vs-noisy-curve","dir":"Articles","previous_headings":"Visualizing Simulated Data","what":"Original vs Noisy Curve","title":"Introduction-to-VDPO","text":"Next, let’s compare original functional curve noisy version:  visualization shows added noise affects single functional curve. blue line represents original functional data (X_s), orange line shows curve added noise (X_se). noise level proportional variance original curve, ensuring consistent relative noise levels across different curves. visualizations help us understand structure characteristics simulated data, including variable domain lengths impact added noise.","code":"# Plot single curve with noise selected_curve <- 50 plot_data_single <- data.frame(   time = rep(1:ncol(sim_data$X_s), 2),   value = c(sim_data$X_s[selected_curve, ], sim_data$X_se[selected_curve, ]),   type = factor(rep(c(\"Original\", \"Noisy\"), each = ncol(sim_data$X_s))) ) %>%    filter(!is.na(value))  ggplot(plot_data_single, aes(x = time, y = value, color = type)) +   geom_line(linewidth = 1) +   theme_minimal() +   scale_color_manual(values = c(\"Original\" = \"#1f77b4\", \"Noisy\" = \"#ff7f0e\")) +   labs(     title = \"Original vs Noisy Functional Curve\",     x = \"Time\",     y = \"Value\",     color = \"Type\"   )"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pavel Hernandez. Author, maintainer. Jose Ignacio Diez. Contractor.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hernandez P (2024). VDPO: Functions development papers. R package version 0.0.0.9000, https://pavel-hernadez-amaro.github.io/VDPO/.","code":"@Manual{,   title = {VDPO: Functions for the development of some papers},   author = {Pavel Hernandez},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://pavel-hernadez-amaro.github.io/VDPO/}, }"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/index.html","id":"vdpo","dir":"","previous_headings":"","what":"Functions for the development of some papers","title":"Functions for the development of some papers","text":"VDPO package provides tools working analyzing functional data varying lengths. variation length can occur two different scenarios: Variable Domain Data Partially Observed Data. refers cases domain data observed changes observations functional data fully observed entire domain interest, respectively. instance, growth curve analysis, individual might measurements starting ending different ages, leading varying observation ranges. Similarly, environmental studies, different locations might data collected distinct time periods, creating domains different lengths.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/index.html","id":"related-papers","dir":"","previous_headings":"","what":"Related Papers","title":"Functions for the development of some papers","text":"Pavel Hernandez-Amaro, Maria Durban, M. Carmen Aguilera-Morillo, Cristobal Esteban Gonzalez, Inmaculada Arostegui. “Modelling physical activity profiles COPD patients: fully functional approach variable domain functional regression models.” doi: 10.48550/arXiv.2401.05839","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions for the development of some papers","text":"install package GitHub, remotes package required:","code":"# install.packages(\"remotes\") remotes::install_github(\"Pavel-Hernadez-Amaro/VDPO\")"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":null,"dir":"Reference","previous_headings":"","what":"Data generator function for the variable domain case. — data_generator_vd","title":"Data generator function for the variable domain case. — data_generator_vd","text":"function internal use.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data generator function for the variable domain case. — data_generator_vd","text":"","code":"data_generator_vd(   N = 100,   J = 100,   nsims = 1,   Rsq = 0.95,   aligned = TRUE,   multivariate = FALSE,   beta_index = 1,   use_x = FALSE,   use_f = FALSE,   seed = NULL )"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data generator function for the variable domain case. — data_generator_vd","text":"N Number subjects. J Number maximum observations per subject. nsims Number simulations per simulation study. Rsq Variance model. aligned data generated aligned . multivariate TRUE, data generated 2 variables. beta_index Index beta. use_x data generated x. use_f data generated f. seed Seed reproducibility.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/data_generator_vd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data generator function for the variable domain case. — data_generator_vd","text":"Example data.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Defining variable domain functional data terms in vd_fit formulae — ffvd","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"Auxiliary function used define ffvd terms within vd_fit model formulae.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"","code":"ffvd(X, grid, nbasis = c(30, 50, 30), bdeg = c(3, 3, 3))"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"X variable domain functional covariate matrix. grid observation points variable domain functional covariate. provided, 1:ncol(X). nbasis number basis used. bdeg degree basis used.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/ffvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defining variable domain functional data terms in vd_fit formulae — ffvd","text":"function interpreted formula VDPO model. list containing following elements: item named B design matrix. item named X_hat smoothed functional covariate. item named L_Phi B_T 1-dimensional marginal B-spline basis used functional coefficient. item named M matrix object indicating observed domain data. item named nbasis number basis used.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"vd_fit function fits generalized additive functional regression models variable domain functional data.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"","code":"vd_fit(formula, data, family = stats::gaussian(), offset = NULL)"},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"formula formula object least one ffvd term. data list object containing response variable covariates. family family object specifying distribution data originates. default distribution gaussian. offset offset vector. default value NULL.","code":""},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"object class vd_fit. list containing following items: item named fit class sop. See sop.fit. item named Beta estimated functional coefficient. item named theta basis coefficient Beta. item named covar_theta covariance matrix theta. item named M number observations points curve. item named ffvd_evals result evaluations ffvd terms formula.","code":""},{"path":[]},{"path":"https://pavel-hernadez-amaro.github.io/VDPO/reference/vd_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of the generalized additive functional regression models for variable domain functional data — vd_fit","text":"","code":"if (FALSE) { # \\dontrun{ # VARIABLE DOMAIN FUNCTIONAL DATA EXAMPLE  # load the example data data <- VDPO::VDPO_example_vd  # define a formula object that determines the model behavior # note that this formula only uses one 'ffvd' term and that # the 'nbasis' parameter is not the default one formula <- y ~ ffvd(X_se, nbasis = c(10, 10, 10))  # fit the model with the data and the formula res <- VDPO(formula = formula, data = data)  # important parameters of the model can be accessed as follows res$Beta_ffvd         # variable domain functional coefficient res$fit$fitted.values # estimated response variable  # ------------------------------------------------------------------ # PARTIALLY OBSERVED FUNCTIONAL DATA EXAMPLE  # load the example data data <- VDPO::VDPO_example_po  # define a formula object that determines the model behavior # note that this formula only uses one 'ffpo' term formula <- y ~ ffvd(X_se)  # fit the model with the data and the formula res <- VDPO(formula = formula, data = data)  # important parameters of the model can be accessed as follows res$theta_ffpo        # functional coefficient res$fit$fitted.values # estimated response variable } # }"}]
